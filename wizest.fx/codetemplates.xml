<?xml version="1.0" encoding="UTF-8" standalone="no"?><templates><template autoinsert="true" context="java" deleted="false" description="hosting event listeners and firing methods" enabled="true" name="__event_listener_host">private transient Vector f${EventName}Listeners;&#13;
    &#13;
public synchronized void add${EventName}Listener(${EventName}Listener l) {&#13;
    Vector v=f${EventName}Listeners == null ? new Vector(2) : (Vector)f${EventName}Listeners.clone();&#13;
    if(!v.contains(l)) {&#13;
        v.addElement(l);&#13;
        f${EventName}Listeners=v;&#13;
    }&#13;
}&#13;
&#13;
public synchronized void remove${EventName}Listener(${EventName}Listener l) {&#13;
    if(f${EventName}Listeners != null &amp;&amp; f${EventName}Listeners.contains(l)) {&#13;
        Vector v=(Vector)f${EventName}Listeners.clone();&#13;
        v.removeElement(l);&#13;
        f${EventName}Listeners=v;&#13;
    }&#13;
}&#13;
&#13;
${cursor}</template><template autoinsert="true" context="java" deleted="false" description="fire method for a event" enabled="true" name="__fire_event">protected void fire${ListenerMethod}(${EventName}Event e) {&#13;
    if(f${EventName}Listeners != null) {&#13;
        Vector listeners=f${EventName}Listeners;&#13;
        int count=listeners.size();&#13;
        for(int i=0;i &lt; count;i++) {&#13;
            ((${EventName}Listener)listeners.elementAt(i)).${enclosing_method}(e);&#13;
        }&#13;
    }&#13;
}&#13;
</template><template autoinsert="true" context="java" deleted="false" description="" enabled="true" name="__property_bind_bound">    private ${propertyType} p${propertyName};&#13;
    public static final String PNAME_${propertyName} = java.beans.Introspector.decapitalize("${propertyName}");&#13;
    public ${propertyType} get${propertyName}() {&#13;
        return p${propertyName};&#13;
    }&#13;
    public void set${propertyName}(${propertyType} p${propertyName}) {&#13;
        ${propertyType} old${propertyName} = this.p${propertyName};&#13;
        this.p${propertyName} = p${propertyName};&#13;
        propertyChangeListeners.firePropertyChange(PNAME_${propertyName}, old${propertyName}, p${propertyName});&#13;
    }&#13;
    ${cursor}</template><template autoinsert="true" context="java" deleted="false" description="" enabled="true" name="__property_bind_constrained">    private ${propertyType} p${propertyName};&#13;
    public static final String PNAME_${propertyName} = java.beans.Introspector.decapitalize("${propertyName}");&#13;
    public ${propertyType} get${propertyName}() {&#13;
        return p${propertyName};&#13;
    }&#13;
    public void set${propertyName}(${propertyType} p${propertyName}) throws java.beans.PropertyVetoException {&#13;
        ${propertyType} old${propertyName} = this.p${propertyName};&#13;
        vetoableChangeListeners.fireVetoableChange(PNAME_${propertyName}, old${propertyName}, p${propertyName});&#13;
        this.p${propertyName} = p${propertyName};&#13;
        propertyChangeListeners.firePropertyChange(PNAME_${propertyName}, old${propertyName}, p${propertyName});&#13;
    }&#13;
    ${cursor}</template><template autoinsert="true" context="java" deleted="false" description="" enabled="true" name="__property_bind_none">    private ${propertyType} p${propertyName};&#13;
    public ${propertyType} get${propertyName}() {&#13;
        return p${propertyName};&#13;
    }&#13;
    public void set${propertyName}(${propertyType} p${propertyName}) {&#13;
        this.p${propertyName} = p${propertyName};&#13;
    }&#13;
    ${cursor}</template><template autoinsert="true" context="java" deleted="false" description="" enabled="true" name="__property_host_change_listener">    private transient java.beans.PropertyChangeSupport propertyChangeListeners = new java.beans.PropertyChangeSupport(this);&#13;
    public synchronized void removePropertyChangeListener(java.beans.PropertyChangeListener l) {&#13;
        propertyChangeListeners.removePropertyChangeListener(l);&#13;
    }&#13;
    public synchronized void addPropertyChangeListener(java.beans.PropertyChangeListener l) {&#13;
        propertyChangeListeners.addPropertyChangeListener(l);&#13;
    }</template><template autoinsert="true" context="java" deleted="false" description="" enabled="true" name="__property_host_vetoable_change_listener">    private transient java.beans.VetoableChangeSupport vetoableChangeListeners = new java.beans.VetoableChangeSupport(this);&#13;
    public synchronized void removeVetoableChangeListener(java.beans.VetoableChangeListener l) {&#13;
        vetoableChangeListeners.removeVetoableChangeListener(l);&#13;
    }&#13;
    public synchronized void addVetoableChangeListener(java.beans.VetoableChangeListener l) {&#13;
        vetoableChangeListeners.addVetoableChangeListener(l);&#13;
    }&#13;
    </template></templates>